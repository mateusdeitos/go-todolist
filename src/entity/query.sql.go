// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package entity

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTodos = `-- name: CountTodos :one
SELECT COUNT(*) FROM todos
`

func (q *Queries) CountTodos(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTodos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
	name, complete
) VALUES (
	$1, $2
)
RETURNING id, name, complete, created_at, updated_at
`

type CreateTodoParams struct {
	Name     pgtype.Text
	Complete pgtype.Bool
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Name, arg.Complete)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Complete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, name, complete, created_at, updated_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Complete,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, name, complete, created_at, updated_at FROM todos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTodosParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Complete,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET name = $1, complete = $2
WHERE id = $3
`

type UpdateTodoParams struct {
	Name     pgtype.Text
	Complete pgtype.Bool
	ID       int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo, arg.Name, arg.Complete, arg.ID)
	return err
}
